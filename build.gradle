plugins {
    id 'java'
    id "org.openapi.generator" version "5.2.1"
    id 'maven'
    id 'maven-publish'
}

group 'org.factomprotocol.identity'
version '0.3.2-SNAPSHOT'

sourceCompatibility = 1.8

ext {
    v = [
            releaseNotes: "Initial release",
            groupId: "org.factomprotocol.identity",
            artifactBaseModels: "factom-did-models",
            artifactBaseClient: "factom-did-client",
            artifactBaseServer: "factom-did-server",
            artifactModelsDescription: "Factom DID models",
            artifactClientDescription: "Factom DID client",
            artifactServerDescription: "Factom DID server",
            artifactUrl: "https://github.com/Sphereon-Opensource/factom-identity-schema/",
            version: "0.3.1-SNAPSHOT",
            apiPackage: "org.factomprotocol.identity.did.api",
            invokerPackage: "org.factomprotocol.identity.did.invoker",
            modelPackage: "org.factomprotocol.identity.did.model",
            gitUserId: "Sphereon-OpenSource",
            gitRepoId: "factom-identity-schema",
            developerEmail: "dev@sphereon.com",
            developerName: "Sphereon BV",
            developerOrganization: "Sphereon BV",
            developerOrganizationUrl: "https://sphereon.com",
            licenseName: "Apache2",
            scmConnection: "https://github.com/Sphereon-Opensource/factom-identity-schema.git",
            scmDeveloperConnection: "https://github.com/Sphereon-Opensource/factom-identity-schema.git",
            scmUrl: "https://github.com/Sphereon-Opensource/factom-identity-schema/"

    ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {


                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Sphereon'
                        name = 'Sphereon BV'
                        email = 'dev@sphereon.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Sphereon-Opensource/factom-identity-schema.git'
                    developerConnection = 'scm:git:https://github.com/Sphereon-Opensource/factom-identity-schema.git'
                    url = 'https://github.com/Sphereon-Opensource/factom-identity-schema/'
                }
            }
        }
    }


    repositories {
        maven {
            def releasesRepoUrl = "https://nexus.qa.sphereon.com/repository/sphereon-opensource-releases"
            def snapshotsRepoUrl = "https://nexus.qa.sphereon.com/repository/sphereon-opensource-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username project.repoUser
                password project.repoPass
            }
        }
        mavenLocal()
    }
}

repositories {
maven {
        def releasesRepoUrl = "https://nexus.qa.sphereon.com/repository/sphereon-opensource-releases"
        def snapshotsRepoUrl = "https://nexus.qa.sphereon.com/repository/sphereon-opensource-snapshots"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
            username project.repoUser
            password project.repoPass
        }
    }
    mavenLocal()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task codegen(dependsOn: ['buildJavaModelsGson', 'buildJavaClientOkHttp', 'buildJavaSpringServer'])

task buildJavaModelsGson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "java"
    library = "okhttp-gson"
    groupId = "$v.groupId".toString()
    id = "${v.artifactBaseModels}-java-gson".toString()
    version = "$v.version".toString()
    releaseNote = "$v.releaseNotes".toString()
    inputSpec = "$projectDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/$v.artifactBaseModels/java-gson".toString()
    apiPackage = "$v.apiPackage".toString()
    invokerPackage = "$v.invokerPackage".toString()
    modelPackage = "$v.modelPackage".toString()
    gitUserId = "$v.gitUserId".toString()
    gitRepoId = "$v.gitRepoId".toString()
    generateApiTests = false
    generateModelTests = false
    apiFilesConstrainedTo = []
    globalProperties = [
            models: "",
            supportingFiles: ".gitignore,build.gradle,gradle.properties,gradlew,gradlew.bat,README.md,settings.gradle,pom.xml,JSON.java,Authentication.java,ApiKeyAuth.java,OAuth.java,Pair.java,RetryingOAuth.java,OAuthFlow.java,OAuthOkHttpClient.java",
            apis: "false"
    ]
    configOptions = [
            artifactId: "${v.artifactBaseModels}-java-gson".toString(),
            artifactDescription:  "$v.artifactModelsDescription".toString(),
            artifactUrl:  "$v.artifactUrl".toString(),
            scmConnection: "$v.scmConnection".toString(),
            scmDeveloperConnection: "$v.scmDeveloperConnection".toString(),
            scmUrl: "$v.scmUrl".toString(),
            booleanGetterPrefix: "is",
            developerEmail: "$v.developerEmail".toString(),
            developerName: "$v.developerName".toString(),
            developerOrganization: "$v.developerOrganization".toString(),
            developerOrganizationUrl: "$v.developerOrganizationUrl".toString(),
            licenseName: "$v.licenseName".toString(),
            dateLibrary: "java8"
    ]
}

task buildJavaClientOkHttp(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "java"
    groupId = "$v.groupId".toString()
    id = "${v.artifactBaseClient}-java-okhttp".toString()
    version = "$v.version".toString()
    releaseNote = "$v.releaseNotes".toString()
    inputSpec = "$projectDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/$v.artifactBaseClient/java-okhttp".toString()
    apiPackage = "$v.apiPackage".toString()
    invokerPackage = "$v.invokerPackage".toString()
    modelPackage = "$v.modelPackage".toString()
    gitUserId = "$v.gitUserId".toString()
    gitRepoId = "$v.gitRepoId".toString()
    generateApiTests = true
    generateModelTests = true
    configOptions = [
            artifactId: "${v.artifactBaseClient}-java-okhttp".toString(),
            artifactDescription:  "$v.artifactClientDescription".toString(),
            artifactUrl:  "$v.artifactUrl".toString(),
            scmConnection: "$v.scmConnection".toString(),
            scmDeveloperConnection: "$v.scmDeveloperConnection".toString(),
            scmUrl: "$v.scmUrl".toString(),
            booleanGetterPrefix: "is",
            developerEmail: "$v.developerEmail".toString(),
            developerName: "$v.developerName".toString(),
            developerOrganization: "$v.developerOrganization".toString(),
            developerOrganizationUrl: "$v.developerOrganizationUrl".toString(),
            licenseName: "$v.licenseName".toString(),
            dateLibrary: "java8"
    ]
    globalProperties = [
            apis: "",
            models: "",
            supportingFiles: ""
    ]
}


task buildJavaSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    generatorName = "spring"
    groupId = "$v.groupId".toString()
    id = "${v.artifactBaseServer}-java-spring-api".toString()
    version = "$v.version".toString()
    releaseNote = "$v.releaseNotes".toString()
    inputSpec = "$projectDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/$v.artifactBaseServer/java-spring-api".toString()
    apiPackage = "$v.apiPackage".toString()
    invokerPackage = "$v.invokerPackage".toString()
    modelPackage = "$v.modelPackage".toString()
    gitUserId = "$v.gitUserId".toString()
    gitRepoId = "$v.gitRepoId".toString()
    generateApiTests = true
    generateModelTests = true
    configOptions = [
            artifactId: "${v.artifactBaseServer}-java-spring-api".toString(),
            artifactDescription:  "$v.artifactServerDescription".toString(),
            artifactUrl:  "$v.artifactUrl".toString(),
            scmConnection: "$v.scmConnection".toString(),
            scmDeveloperConnection: "$v.scmDeveloperConnection".toString(),
            scmUrl: "$v.scmUrl".toString(),
            developerEmail: "$v.developerEmail".toString(),
            developerName: "$v.developerName".toString(),
            developerOrganization: "$v.developerOrganization".toString(),
            developerOrganizationUrl: "$v.developerOrganizationUrl".toString(),
            licenseName: "$v.licenseName".toString(),
            java8: "true",
            dateLibrary: "java8",
            interfaceOnly: "true",
            delegatePattern: "true",
            useTags: "true",
            useOptional: "true",
            useBeanValidation: "true",
            skipDefaultInterface: "true",
            openapiDocketConfig: "true"

    ]
    globalProperties = [
            apis: "",
            models: "false",
            supportingFiles: ""
    ]
}
